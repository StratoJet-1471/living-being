const path = require('path');
const { CleanWebpackPlugin } = require("clean-webpack-plugin");
const CopyWebpackPlugin = require("copy-webpack-plugin");

module.exports = {
    mode: "development",
    entry: "./src/index.jsx",  //Файл, с которого начинается сборка ("точка входа"). Все остальные модули, участвующие в сборке, должны быть подключены к этому файлу через import.
    output: {
        filename: "bundle.js", //Это, собственно, файл-результат сборки. Если его имя не задать, вебпак назовёт его так же, как файл-"точку входа", в entry - только с расширением js.
        path: path.resolve(__dirname, "public")
    },
  
    //Webpack при сборке копирует файлы из папки-исходника (у нас - "src") в папку-цель ("public").
    //Некоторые файлы при этом транслируются в js-код, понятный браузеру.
    plugins: [
        new CleanWebpackPlugin(), //Этот плагин очищает папку-цель перед копированием/трансляцией от результатов предыдущих сборок.
        new CopyWebpackPlugin({ //Этот плагин занимается копированием/трансляцией.
            patterns: [ 
                {
                    from: "src",
                    to: "", //Здесь нужно указать путь относительно заданной выше, в module.exports.output папки-цели (т.е., "public").
                    //Поскольку мы собираемся копировать прямо в саму public, а не в какую-то её подпапку, то указываем просто "".
                    globOptions: {
                        ignore: [
                                  "**/*.jsx", "**/*.js", "**/*.json", "**/css/**", "**/react-redux-store/**"  //Эти файлы и папки не будут копироваться.
                        ]
                    }
                }
            ]
        })
    ],
    
    //Все лоадеры включаются в массив объектов module.rules. Информация о лоадере состоит из двух частей. Первая
    // — тип обрабатываемых файлов, вторая — лоадер, используемый для обработки данного типа файлов.
    module: {
        rules: [ //Правила трансляции.
            {
                test: /\.jsx$/, //К каким файлам применяется трансляция
                exclude: /node_modules/,  //Исключения - эти файлы не будут транлсироваться, даже если удовлетворяют test.
                use: {
                    loader: "babel-loader", //Здесь указывается webpack-инструмент, который будет отвечать за трансляцию.
                    options: {
                        presets: ["@babel/preset-react"]     
                        //Пресеты – наборы babel для компиляции различных диалектов JS. 
                        //Нам нужен только babel-preset-react, который занимается компиляцией jsx.
                    }
                }
            },
            {
                test: /\.css$/,
                exclude: /node_modules/,
                use: [ 'style-loader', 'css-loader' ]
            }
        ]
    }
};
